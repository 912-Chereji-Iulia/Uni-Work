%is_in(e,l1l2..ln)={false, if n=0
%			true, if e = l1
%			is_in(e,l2l3..ln), otherwise
%			}
%is_in(E-elem, L-list)
%flow- (i, i) (o,i)
is_in(E, [E|_]).
is_in(E, [_|T]):-
	is_in(E, T).

%valid(l1l2..ln)={if n=0 or n=1,return false
%				 if l1 != l2 and l1 in [-1,0,1] and l2 in [-1,0,1], return true
%				 return false, otherwise
%				}
%valid(L-list) 
%flow (i) (o)
valid([]):-!.
valid([_]):-!.
valid([H1,H2|T]):-
    is_in(H1,[-1,0,1]),
    is_in(H2,[-1,0,1]),
    H1 =\= H2,
    valid([H2|T]).

%generate(n,pos,l1..l2n+1)={ return 0, if pos=2*n+1
%				   return lpos+ generate(n, pos+1,l1..l2n+1), if valid(l1..l2n+1).
%
%generate(N: int, Pos: int, S: list)
%flow model: (i, i, o)

generate(N, Pos, [0]) :-
    Pos =:= 2*N+1,!.
    
generate(N, Pos, [H|T]) :-
    NewPos is Pos + 1,
    generate(N, NewPos, T),
    valid([H|T]).

allSol(N,R):-
    findall(R1,generate(N,1,R1),R).



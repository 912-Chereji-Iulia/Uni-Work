% Write a predicate to generate the list of all subsets with all elements of a given list.
%Eg: [2, 3, 4] N=2 => [[2,3],[2,4],[3,4]]

%insert(l1l2..ln,e)={[e], if l is empty
					% e + l1l2..ln, n>=1
					% l1+ insert(l2..ln, e), otherwise
%insert(l-list, e-int, rl-resulted list) - flow model(i,i,o)
insert([],E,[E]).
insert([H|T], E, [E,H|T]).
insert([H|T], E, [H|RL]):-
    insert(T, E, RL).

%perm(l1..ln)={[], if n=0
			 % insert( perm(l2..ln),l1), otherwise
%perm(l-list, rl-result list) - fm:(i,o)
perm([],[]).
perm([H|T], RL):-
    perm(T,R),
    insert(R, H, RL).

%START 1

%comb(l1l2..ln,k) ={l1, if k=1, n>=1
%					comb(l2..ln,k), k>=1
%					l1 U comb(l2..ln,k-1), k>1

%comb(l-list, k-nr, rl-result list) -> (i,i,o)

comb([H|_], 1, [H]).
comb([_|T], K, RL):-
    comb(T,K,RL).
comb([H|T],K,[H|RL]):-
    K>1,
    K1 is K-1,
    comb(T,K1,RL).

allSols(L,K,R):-
    findall(RL, comb(L,K,RL), R).

%2.Are  given  npoints  in  a  plan  (represented  using  itscoordinates). 
%Write  a  predicate  to  determine  all subsets of collinear points.

% coliniare(x1, y1, x2, y2, z1, z2) = True, x1 == x2 == x3
%                                  = True, y1 == y2 == y3
%                                  = True, all different &
%                                  (y2-y1) / (x2-x1) == (y3-y2) /
%                                  (x3-x2)

% coliniare(x1:number, y1:number, x2:number, y2:number, x3:number, y3:number)
% coliniare(i,i,i,i,i,i)

coliniare(X,_,X,_,X,_).
coliniare(_,X,_,X,_,X).
coliniare(X1,Y1,X2,Y2,X3,Y3):-
	X1 =\= X2, X2 =\= X3, X3 =\= X1,
    Y1 =\= Y2, Y2 =\= Y3, Y3 =\= Y1,
    P1 is (Y2-Y1)/(X2-X1),
    P2 is (Y3-Y2)/(X3-X2),
    P1 =:= P2.

subsets_col([],[]).
subsets_col([[A,B],[A1,B1],[A2,B2]|T],[[[A,B],[A1,B1],[A2,B2]]|R]):-
    coliniare(A,B,A1,B1,A2,B2), !,
    subsets_col([[A1,B1],[A2,B2]|T],R).
subsets_col([_|T],R):-
    subsets_col(T,R).

% allsolutions(L:list, R:list)
% allsolutions(i, o)

allSols(L, R) :- 
    findall(RPartial, subsets_col(L, RPartial), R).

%3.Write a predicate to determine all decomposition of n(n given, positive), 
%as sum of consecutive natural numbers.

%oneSol(n,e)={[], if n=0
%             e+oneSol(n-e, e+1), otherwise

%oneSol(n-nr,e-nr,L-list) ->(i,i,o)

oneSol(0,_,[]).
oneSol(N,E,[E,R]):- N>=E,
    N1 is N-E,
    E1 is E+1,
    oneSol(N1,E1,R).

%decompose(n,e)={	oneSol(n, e), e < n
			% 	oneSol(n, e + 1), e < n

%decompose(n-nr, e-nr, r-list) ->(i,i,o)
decompose(N, E, R):- E<N,
    oneSol(N, E, R).
decompose(N, E, R):- E<N,
    E1 is E + 1,
    oneSol(N, E1, R).

% allsolutions(N:number, R:list)
% allsolutions(i, o)

allSols(N, R) :-
    findall(RPartial, decompose(N, 1, RPartial), R).
%4.The lista1...an is given. Write a predicate to determine all sublists strictly 
%ascending of this list a.

%subset(l1..ln)=[], if n=0
				% l1+subset(l2..ln)
				%subset(l2..ln)

%subset(l-list, r-list) ->(i,o)

subset([],[]).
subset([H|T], [H|R]):-
    subset(T, R).
subset([_|T], R):-
    subset(T, R).

%is_ascending(l1,,ln)={t if n=0 or n=1
					% f, if l1>l2
					% is_ascending(l2..ln), otherwise

%is_asc(l-list) ->(i)

is_asc([]):- !.
is_asc([_]):- !.
is_asc([H1,H2|T]):- H1 < H2,
    is_asc([H2|T]).

%get_subsets(l1..ln)={[], if n=0
					% subset(l1..ln), is_asc(subset(l1..ln))

%get_subsets(l-list, r-list) ->(i,o)

get_subsets([], []).
get_subsets([H|T], R):-
    subset([H|T], R),
    is_asc(R).

allSols(L, R) :-
    findall(RPartial,get_subsets(L, RPartial), R).

%5.Two integers,n and m are given. Write a predicate to determine all possible sequences of 
%numbers from 1 to n, such that between any two numbers fromconsecutive positions, 
%the absolute differenceto be >= m.

% diff(a, b) =
% 	b - a, a < b
% 	a - b, a > b

% diff(A:number, B:number, R:number)
% diff(i, i, o)

diff(A, B, R):- A > B,
    R is A-B.
diff(A, B, R):- A < B,
    R is B-A.

%seq(n, i)={[], if i=n+1
%			 i+seq(n, i+1),i <= n
% 	seq(n, i + 1), i <= n

% sequences(N:number, I:number, R:list)
% sequences(i, i, o)

seq(N, I, []):-
    I =:= N+1, !.

seq(N, I, [I|R]):-
    I =< N,
    I1 is I+1,
    seq(N, I1, R).

seq(N, I, R):-
    I =< N,
    I1 is I+1,
    seq(N, I1, R).


% check(l1...ln, m) =
% 	true, diff(l1, l2) >= m and n = 2
% 	check(l2...ln, m), diff(l1, l2) >= m and n > 2
% 	false, otherwise

% check(L:list, M:mumber)
% check(i, i)

check([H1,H2], M):-
    diff(H1,H2,R),
    R >= M, !.
check([H1,H2|T], M):-
    diff(H1,H2,R),
    R >= M, 
    check([H2|T], M).

% onesolution(N:number, M:number, R:list)
% onesolution(i, i, o)

onesolution(N, M, R) :-
    seq(N, 1, R),
    check(R, M).

allSols(N, M,R):-
    findall(RL, onesolution(N, M, RL), R).

%6.Generate the list of all arrangements of K elements of a given list.

%insert(l1l2..ln,e)={[e], if l is empty
					% e + l1l2..ln, n>=1
					% l1+ insert(l2..ln, e), otherwise
%insert(l-list, e-int, rl-resulted list) - flow model(i,i,o)
insert([],E,[E]).
insert([H|T], E, [E,H|T]).
insert([H|T], E, [H|RL]):-
    insert(T, E, RL).

%arr(l1..ln, k) ={l1, if k=1
				% arr(l2..ln, k), if k>=1
				% insert(l1, arr(l2..ln,k-1)), if k>1

%arr(l-list, k-nr, r-list)->(i,i,o)
arr([H|_], 1, [H]).
arr([_|T], K, R):- 
    arr(T,K,R).
arr([H|T], K, R1):-
    K > 1,
    K1 is K-1,
    arr(T,K1, R),
    insert(R, H, R1).

allSols(L,K,R):-
    findall(RL, arr(L,K,RL), R).

%7.A player wants to choose the predictionsfor 4 games.The predictions can be 1, X, 2.
% Write a predicate to  generate  all  possible  variants considering that:
%last prediction canâ€™t be 2 and no more  than  two possible predictions X.

candidat(1).
candidat(3). % X = 3
candidat(2).

% toate(n, c, p) =
% 	c, n = 4
% 	toate(n + 1, candidat(x) + c, p * x), p*x % 27 = 0

% toate(N:number, C:list, R:list, P:number)
% toate(i, i, o, i)

toate(4,R,R,_):-!.
toate(I,C,R,P):-
    candidat(X),
    I1 is I+1,
    P1 is P*X,
    P1 mod 27 =\= 0, 
    toate(I1,[X|C],R,P1).

% rez(R:list)
% rez(o)

rez(R):-toate(1,[1],R,1).
rez(R):-toate(1,[3],R,1).

% allsolutions(R:list)
% allsolutions(o)

allsolutions(R) :-
    findall(RPartial, rez(RPartial), R).

%8.Generate all strings of n parenthesis correctly closed.
paranteza('(').
paranteza(')').

% allcombinations(n, i, c) =
% 	c, i = n
% 	allcombinations(n, i + 1, paranteza(x) + c), otherwise

% allcombinations(N:number, I:number, C:list, R:list)
% allcombinations(i, i, i, o)

allComb(N, N, C, C):- !.
allComb(N, I, C, R):-
    paranteza(X),
    I1 is I+1,
    allComb(N, I1,[X|C], R).

% valid(l1...ln, c) =
% 		valid(l2...ln, c + 1), l1 = if '('
% 		valid(l2...ln, c - 1), l1 = ')' and c > 0

% valid(L:list, C:number) ->(i, i)

valid([], 0).
valid([H|T], C) :-
    H == '(',
    NC is C + 1,
    valid(T, NC).
valid([H|T], C) :-
    H == ')',
    C > 0,
    NC is C - 1,
    valid(T, NC).

% onesolution(N:number, R:list)
% onesolution(i, o)

onesolution(N, R) :-
    allcombinations(N, 0, [], R),
    check(R, 0).

% allsolutions(N:number, R:list)
% allsolutions(i, o)

allsolutions(N, R) :-
    findall(RPartial, onesolution(N, RPartial), R).
%9.Generate all permutation of N (N -given) respecting the property: 
%for every 2<=i<=n exists an 1<=j<=i, so |v(i)-v(j)|=1.

% inserare(l1...ln, e) =
% 	[e], n = 0
% 	e + l1...ln, n >= 1
% 	l1 + inserare(l2...ln, e), otherwise

% inserare(L:list, E:number, R:list)
% inserare(i, i, o)

inserare([], E, [E]).
inserare([H|T], E, [E,H|T]).
inserare([H|T], E, [H|R]) :- 
         inserare(T, E, R).

% permutari(l1...ln) =
% 	[], n = 0
% 	inserare(permutari(l2...ln), l1), otherwise

% permutari(L:list, R:list)
% permutari(i, o)

permutari([], []).
permutari([H|T], R) :-
    permutari(T, RP),
    inserare(RP, H, R).

% diff(a, b) =
% 	a - b, a > b
% 	b - a, a < b

% diff(A:number, B:number, R:number)
% diff(i, i, o)

diff(A, B, R) :-
    A > B,
    R is A - B.
diff(A, B, R) :-
    A =< B,
    R is B - A.

% check(l1...ln, e) =
% 	true, n = 0
% 	true, diff(l1, e) = 1
% 	check(l2...ln, e), n > 0
% 	false, otherwise

% check(L:list, E:number)
% check(i, i)

check([], _).
check([H|_], X) :-
    diff(X, H, R),
    R =:= 1, !.
check([_|T], X) :-
    check(T, X).

% checkPerm(L:list, E:number)
% checkPerm(i, i)
 	
checkPerm([], _).
checkPerm([H|T], L) :-
    check(L, H),
    checkPerm(T, [H|L]).

% onesolutions(L:list, R:list)
% onesolutions(i, o)
onesolution(L, R) :-
    permutari(L, R),
    checkPerm(R, []).

% createList(n) =
% 	[], n = 0
% 	n + createList(n - 1), n > 0

% createList(N:number, R:list)
% createList(i, o)

createList(0, []).
createList(N, [N|R]) :-
    N > 0,
    NN is N - 1,
    createList(NN, R).
% allsolutions(N:number, R:list)
% allsolutions(i, o)

allsolutions(N, R) :-
    createList(N, RL),
    findall(RP, onesolution(RL, RP), R).


%10.For a list a1...an with integer and distinct numbers, 
% define apredicate to determine all subsets with sum of elements divisible with n.


% subsets(l1...ln) =
% 	[], n = 0
% 	l1 + subsets(l2...ln), n > 0
% 	subsets(l2...ln), n > 0

% subsets(L:list, R:list)
% subsets(i, o)

subset([],[]).
subset([H|T], [H|R]):-
    subset(T, R).
subset([_|T], R):-
    subset(T, R).

%sum (l1,,ln, s)={s, if n=0
				% sum(l2..ln, l1+s), otherwise

sum([],S, S).
sum([H|T], S, R):-
    S1 is S+H,
    sum(T, S1, R).

%valid(l1..lm,n)={t, if m=0
%				t, if sum(l1..lm)%n=0
% 				f, otherwise
valid([],_).
valid([H|T], N):-
    sum([H|T],0,R),
    Rest is R mod N,
    Rest =:= 0, !.

% onesolution(L:list, N:number, R:list)
% onesolution(i, i, o)

onesolution(L, N, R) :- 
    subset(L, R),
    valid(R, N).

% allsolutions(L:list, N:number, R:list)
% allsolutions(i, i, o)

allsolutions(L, N, R) :-
    findall(RPartial, onesolution(L, N, RPartial), R).
%12.Generate all sub-strings of a length 2*n+1, formed from values of 0,1 or -1,
% so a1 = ..., a2n+1 = 0 and |a(i+1) -ai| = 1 or 2, for every1 <= i <= 2n.

%is_in(e,l1l2..ln)={false, if n=0
%			true, if e = l1
%			is_in(e,l2l3..ln), otherwise
%			}
%is_in(E-elem, L-list)
%flow- (i, i) (o,i)
is_in(E, [E|_]).
is_in(E, [_|T]):-
	is_in(E, T).

%valid(l1l2..ln)={if n=0 or n=1,return false
%				 if l1 != l2 and l1 in [-1,0,1] and l2 in [-1,0,1], return true
%				 return false, otherwise
%				}
%valid(L-list) 
%flow (i) (o)
valid([]):-!.
valid([_]):-!.
valid([H1,H2|T]):-
    is_in(H1,[-1,0,1]),
    is_in(H2,[-1,0,1]),
    H1 =\= H2,
    valid([H2|T]).

%generate(n,pos,l1..l2n+1)={ return 0, if pos=2*n+1
%				   return lpos+ generate(n, pos+1,l1..l2n+1), if valid(l1..l2n+1).
%
%generate(N: int, Pos: int, S: list)
%flow model: (i, i, o)

generate(N, Pos, [0]) :-
    Pos =:= 2*N+1,!.
    
generate(N, Pos, [H|T]) :-
    NewPos is Pos + 1,
    generate(N, NewPos, T),
    valid([H|T]).

allSol(N,R):-
    findall(R1,generate(N,1,R1),R).

%13. The lista1, ..., an is given and it consists of distinct integers.
% Write a predicate to determineall subsets with aspect of "mountain" (a set has 
%a "mountain" aspect if theelements increase to a certain point and then decrease).


% subsets(l1...ln) =
% 	[], n = 0
% 	l1 + subsets(l2...ln), n > 0
% 	subsets(l2...ln), n > 0

% subsets(L:list, R:list)
% subsets(i, o)

subset([],[]).
subset([H|T], [H|R]):-
    subset(T, R).
subset([_|T], R):-
    subset(T, R).

% munte(l1...ln, f) =
% 	true, n <= 1 and f = 1
% 	munte(l2...ln, 0), l1 < l2 and f = 0
% 	munte(l2...ln, 1), l1 >= l2 and f = 0
% 	munte(l2...ln, 1, l1 > l2 and f = 1
% 	false, otherwise

munte([], 1).
munte([_], 1).
munte([H1, H2|T], 0) :- H1 < H2,
    munte([H2|T], 0).
munte([H1, H2|T], 0) :- H1 >= H2,
    munte([H2|T], 1).
munte([H1, H2|T], 1) :- H1 > H2,
    munte([H2|T], 1).

% isMountain(l1...ln) =
% 	munte(l1...ln, 0), l1 < l2

% isMountain(L:list)
% isMountain(i)

isMountain([H1, H2, H3|T]) :- H1 < H2, munte([H1, H2, H3|T] ,0).

oneSol(L,S):-
    subset(L,S),
    isMountain(S).

allsolutions(L, R) :-
    findall(RPartial, oneSol(L, RPartial), R).

%14.Write a program to generate the list of all subsets of sum S
% with the elements of a list (S -given).

% subsets(l1...ln) =
% 	[], n = 0
% 	l1 + subsets(l2...ln), n > 0
% 	subsets(l2...ln), n > 0

% subsets(L:list, R:list)
% subsets(i, o)

subset([],[]).
subset([H|T], [H|R]):-
    subset(T, R).
subset([_|T], R):-
    subset(T, R).

%sum (l1,,ln, s)={s, if n=0
				% sum(l2..ln, l1+s), otherwise

sum([],S, S).
sum([H|T], S, R):-
    S1 is S+H,
    sum(T, S1, R).

valid(L,S):-
    sum(L,0,S1),
    S1=:=S, !.

% onesolution(L:list, N:number, R:list)
% onesolution(i, i, o)

onesolution(L, S, R) :- 
    subset(L, R),
    valid(R,S).

% allsolutions(L:list, S:number, R:list)
% allsolutions(i, i, o)

allsolutions(L, S, R) :-
    findall(RPartial, onesolution(L, S, RPartial), R).
